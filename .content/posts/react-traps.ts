export default {
  "filePath": "/Users/ben/Documents/workspace/project/z1/posts/react-traps.md",
  "content": "<h2>React 的陷阱</h2>\n<p>本文整理各种 React 常见的陷阱，并深入探究陷阱背后的原因，最后有各种避开陷阱的可行实践方案。</p>\n<h3>用 &#x26;&#x26; 运算符进行判断组件失败</h3>\n<p>当使用 &#x26;&#x26; 运算符进行判断组件是否加载时，如果左值为 0（假值），最终结果只会显示 0，看看实验代码。</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> React </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">from</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'react'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> ShoppingList </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">from</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> './ShoppingList'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> App</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">items</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> setItems</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> React</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.useState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">([]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> &#x3C;</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">>{</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">items</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">length</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> &#x3C;</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">ShoppingList</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> items</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{items} />}&#x3C;/</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">>;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">export</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> default</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> App;</span></span></code></pre>\n<p>由于在JavaScript中 0 是一个假值，所以 &#x26;&#x26; 运算符会短路，整个表达式的结果为 0 。表达式应该使用“纯粹”的布尔值（true/false），或使用三元运算符。</p>\n<h3>修改状态后访问状态是过期的</h3>\n<p>React 的 <code>useState</code> 的实现使得它返回的 <code>state</code> 只能在组件 <code>re-render</code>（Function Component 重新执行） 后才会更新。所以在 <code>setState</code> 执行后，立即通过 state 是无法获取到新值的。这一实现特性带来了陷阱。看看真实案例代码。</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">export</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> default</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> App</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">todos</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> setTodos</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">&#x3C;</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[]>([]);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> promiseResolverRef</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">();</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> promiseRef</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    new</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> Promise</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">((resolve) </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">      promiseResolverRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.current </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> resolve;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    })</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> update</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> async</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> () </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    await</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> sleep</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">1000</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    setTodos</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">([</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">1</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">2</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]);</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    promiseResolverRef</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.current?.</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> postTodos</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> async</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> () </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    await</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> promiseRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.current;</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(todos); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// [] , 仍然是空数组</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    &#x3C;</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> ></span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      &#x3C;</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> onClick</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{update}>&#x3C;/</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">></span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      &#x3C;</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> onClick</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{postTodos}></span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    &#x3C;/</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">></span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>这里 <code>useState</code> 特性根本原因是每次返回的 <code>state</code> 都是新的值（值类型），而不是不可变的引用。所以 <code>setState</code> 执行后，<code>state</code> 只能在 <code>Component</code> 的 <code>re-render</code> 时才能更新到新的值。\n这个陷阱在社区通常有另一种解释，被称为<code>过期闭包（stale closure）</code>。社区认为，在闭包创建后，所引用的外部作用域内的变量已经被修改，但闭包内仍然保存了旧值。看看社区引用实例。</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> createIncrement</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(i) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  let</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> increment</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(value);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> message</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> `current value is </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">${</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">value</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">}</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">`</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    return</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> logValue</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">      console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(message); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 值传递，常量 message 定义时已经是 current value is 1</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> increment;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> inc</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> createIncrement</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">1</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> log</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> inc</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 1</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">inc</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 2;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// \"Current value is 1\"</span></span></code></pre>\n<p>稍微修改下这个例子，可以看到其实与闭包无关。</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> createIncrement</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(i) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  let</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> increment</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(value);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    return</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> logValue</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">      console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">`current value is </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">${</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">value</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">}</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">`</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 不再传递，而是直接使用值</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> increment;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> inc</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> createIncrement</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">1</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> log</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> inc</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 1</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">inc</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 2;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// \"Current value is 2\"</span></span></code></pre>\n<p>更详细的介绍可以参考 YouTube 视频<a href=\"https://www.youtube.com/watch?v=7yw_D3h4xSo\">《Why \"Stale Closure\" Misleads React Devs》</a></p>\n<p>现在有两种方案可以尽力避开这种陷阱。</p>\n<h4>用 useRef 保存最新的 state</h4>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">count</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> setCount</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> countRef</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(count);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">useEffect</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">  countRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.current </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> count; </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 同步到不可变引用</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [count]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleClick</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> () </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  setCount</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(count </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">+</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 1</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  setTimeout</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">    // 延迟到 re-render 后</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">countRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.current); </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 已经同步 count</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">};</span></span></code></pre>\n<h4>扩展 useState，增加同步状态值</h4>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> countState</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> createSyncState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> App</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> count</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useSyncState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(countState)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> &#x3C;</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> onClick</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">'[before]'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">countState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.value) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 0</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    countState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.value</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">+=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">1</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">'[after]'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">countState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.value) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// 1</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }>{count}&#x3C;/</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">div</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">></span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>源码请查看<a href=\"/post/Ymd7vD\">createSyncState</a></p>\n<h3>一次性事件与响应状态无法分离</h3>\n<p>一次性事件本来应该仅定义一次，然后通过订阅-发布模型运行。然后在 React 中，一旦事件里依赖了响应状态，就不得不依靠 Component re-render 来重新订阅获取最新状态的事件。如此，原本一次性事件就必须经历取消订阅，重新订阅。看看这个实例。</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">todos</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> setTodos</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">();</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handle</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> () </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">  console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(todos);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">};</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">useEffect</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">  // repeated binding</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">  window</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.addEventListener</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">'keydown'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> handle);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> window</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.removeEventListener</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(handle);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [todos]);</span></span></code></pre>\n<p>对于这个陷阱， React 团队曾试图给出 useEffectEvent（最初命名 useEvent），将订阅事件和响应状态分离。但目前 react 19 仍然没有包含这个 RFC。所以，只能自己实现一个版本，看看修正后代码。</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">todos</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> setTodos</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useState</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">();</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> handle</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useEffectEvent</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">  console</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.log</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(todos);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">});</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">useEffect</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">  // once</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">  window</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.addEventListener</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">'keydown'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> handle);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> window</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.removeEventListener</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(handle);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [todos]);</span></span></code></pre>\n<p>useEffectEvent 返回的 handle 是不可变的引用，useEffectEvent 内部通过 useEffect 获取最新状态后再同步返回 handle 事件。源码请查看<a href=\"/post/NfKK4r\">useEffectEvent</a></p>",
  "fileName": "react-traps",
  "subject": [],
  "md5": "eab8926e44c91578059d8b3b75b7f20d",
  "id": "uPRkjL",
  "frontMatter": {
    "title": "尽力躲避 React 中的陷阱",
    "description": "介绍 React 开发过程中存在的各种陷阱，给出避开陷阱的实践方案",
    "cover": "https://images.unsplash.com/photo-1611701600139-0d468e20c9a1?q=80&w=2071&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  },
  "updateAt": 1755959773149
}