export default {
  "filePath": "/Users/ben/Documents/workspace/project/z1/posts/opinionted-react.md",
  "content": "<h2>增强 React 开发体验和代码维护性</h2>\n<p>在使用 React 开发时，强制约束原生 Hook(比如useEffect, useState) 的使用方式，使用更有语义的替代方案。并且将 <strong>纯 UI 状态</strong> 和 <strong>非纯 UI 响应式状态</strong>严格分离，在 react Function Component 中只包含 <strong>纯 UI 状态</strong>，任何具有副作用的<strong>非纯 UI 状态</strong>，使用 jotai 或 valtio 等现代状态管理库进行管理，同时实现响应式功能（比如提交表单，自动触发操作等）</p>\n<h3>1. 限制 React 原生 Hook 的直接使用</h3>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// eslint-rules/no-raw-react-hooks.js</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">module</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">exports</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  meta</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    type</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'problem'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    docs</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      description</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#FFAB70\">        '禁止直接使用 React 原生 Hooks，使用团队定义的语义化 Hooks 代替;禁止在 JSX props 中直接传入会导致不必要 re-render 的值'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    schema</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> []</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    messages</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      noRawHook</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> '禁止直接使用 {{ name }}，请使用团队定义的语义化 Hook 代替。'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      unstableProp</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#FFAB70\">        '不要在 props 中直接传入 {{ type }}，请将其提取到 useMemo/useCallback 或常量。'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  create</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(context) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> bannedHooks</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">'useEffect'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'useState'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'useContext'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">];</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">      ImportDeclaration</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(node) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">node</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">source</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">===</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'react'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">          for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> specifier</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> of</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> node</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.specifiers) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">            if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">              specifier</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.imported </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x26;&#x26;</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">              bannedHooks</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.includes</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">specifier</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">imported</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.name)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            ) {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">              context</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.report</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">                node</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> specifier</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">                messageId</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'noRawHook'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">                data</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> { name</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> specifier</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">imported</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.name }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">              });</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">          }</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">      JSXAttribute</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(node) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">node</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.value) </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">return</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">        const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> v</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> node</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">value</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.expression;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">        // { foo: 'bar' } 或 [1,2,3]</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">v</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">?.type </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">===</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'ObjectExpression'</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> ||</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> v</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">?.type </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">===</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'ArrayExpression'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">          context</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.report</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            node</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            messageId</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'unstableProp'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            data</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">              type</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> v</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.type </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">===</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'ObjectExpression'</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> ?</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> '对象字面量'</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> :</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> '数组字面量'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">          });</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">        // () => {}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">          v</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">?.type </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">===</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'ArrowFunctionExpression'</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">          v</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">?.type </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">===</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'FunctionExpression'</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">        ) {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">          context</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.report</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            node</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            messageId</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'unstableProp'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">            data</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> { type</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> '函数'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">          });</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">      }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">};</span></span></code></pre>\n<p>在 .eslintrc.js 里加：</p>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">module</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">exports</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  plugins</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> [</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">'custom'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  rules</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#FFAB70\">    'custom/no-raw-react-hooks'</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'error'</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">};</span></span></code></pre>\n<h3>2. 定义语义化 Hooks</h3>\n<p>useUIState, useMount, useUnmount, useUpdate</p>\n<h3>3. 自定义 useEffectReact</h3>\n<pre class=\"shiki shiki-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> { useCallback</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> useEffect</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> useRef } </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">from</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> 'react'</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">export</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useEffectEvent</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> extends</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">args</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> unknown</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[]) </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> unknown</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">>(</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  fn</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  const</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> ref</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useRef</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(fn);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">  useEffect</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">    ref</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.current </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> fn;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  }</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> []);</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">  return</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> useCallback</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(((</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">args) </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=></span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> ref</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">.current</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">args)) </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">as</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#212121;--shiki-dark:#BBBBBB\">,</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> []);</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h3>结论</h3>\n<p>这套架构的最大价值在于：把“容易出错的自由度”收紧为“可读、可控、可优化的约束”，让性能与可维护性更可预期；代价是与生态的摩擦、工具与适配的维护成本，以及对团队习惯的改造。若能按“分阶段推进 + 适配层 + 作用域 store + DevTools”四件套去落地，优势会逐步显现，而缺陷也能被控制在工程可接受范围内。</p>",
  "fileName": "opinionted-react",
  "subject": [],
  "md5": "846fdc481da09fa650d6ddc63996931b",
  "id": "NfKK4r",
  "frontMatter": {
    "title": "增强 React 开发体验和代码维护性",
    "description": "增强 hook 语义化，杜绝无效的 re-render",
    "cover": "https://images.unsplash.com/photo-1687603917313-ccae1a289a9d?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  },
  "updateAt": 1755959181938
}